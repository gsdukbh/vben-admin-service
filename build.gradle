plugins {
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
}

group = 'top.werls'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    // 使用阿里云开源镜像代理 https://developer.aliyun.com/mvn/guide
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring/'
    }
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven {
        url 'https://maven.aliyun.com/repository/spring-plugin'
    }
    mavenLocal()
    mavenCentral()
}

dependencies {

    def gsonVersion = '2.9.0'
    def lang3Version = '3.12.0'
    def springdocVersion = '2.8.8'
    def jwtVersion = '0.12.5'
    def flywaydbVersion = '10.11.1'
    def mysqlVersion = '8.3.0'
    def postgresql='42.7.3'

    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'

    // mapstruct https://mapstruct.org/
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //sql 版本控制 https://flywaydb.org/
    implementation "org.flywaydb:flyway-core:${flywaydbVersion}"
    implementation "org.flywaydb:flyway-mysql:${flywaydbVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywaydbVersion}"


    //mysql
    runtimeOnly "com.mysql:mysql-connector-j:${mysqlVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresql}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "org.apache.commons:commons-lang3:${lang3Version}"

    // spring doc https://springdoc.org/
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    // jwt https://github.com/jwtk/jjwt
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-gson:${jwtVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
